---
description:
globs:
alwaysApply: false
---
# 对话框使用指南

## 确认对话框 (ConfirmDialog)

项目中需要使用确认对话框时，应使用 [confirm_dialog.dart](mdc:lib/widgets/dialogs/confirm_dialog.dart) 中的 `ConfirmDialog` 组件。

### 使用方法

推荐使用静态方法 `ConfirmDialog.show()` 来显示确认对话框：

```dart
final result = await ConfirmDialog.show(
  context: context,
  title: '删除确认',
  content: '确定要删除此项目吗？删除后无法恢复',
  cancelText: '取消', // 可选，默认为"取消"
  confirmText: '删除', // 可选，默认为"确定"
  isDanger: true, // 可选，用于危险操作，按钮将显示为红色
);

if (result == true) {
  // 用户点击了确认按钮
  // 执行确认操作
} else {
  // 用户点击了取消按钮或关闭了对话框
  // 执行取消操作或不做任何事
}
```

### 参数说明

- `context`：构建上下文，必填
- `title`：对话框标题，必填
- `content`：对话框内容，必填
- `cancelText`：取消按钮文本，可选，默认为"取消"
- `confirmText`：确认按钮文本，可选，默认为"确定"
- `isDanger`：是否为危险操作，可选，默认为 false

### 返回值

- 返回 `Future<bool?>`
- 点击确认按钮返回 `true`
- 点击取消按钮返回 `false`
- 点击对话框外部或返回键关闭对话框返回 `null`

### 注意事项

- 避免直接使用 Flutter 原生的 `AlertDialog`，应始终使用 `ConfirmDialog` 以保持 UI 一致性
- 对于危险操作（如删除、重置等），应将 `isDanger` 设置为 `true`
- 对话框文本应简洁明了，表达清晰的意图

## 支付密码对话框 (PayPasswordDialog)

需要用户输入支付密码时，应使用 [pay_password_dialog.dart](mdc:lib/widgets/dialogs/pay_password_dialog.dart) 中的 `PayPasswordDialog` 组件。这个组件使用了 [pin_input.dart](mdc:lib/widgets/pin_input.dart) 中的 `PinInput` 组件来提供分隔的6位数字密码输入界面。

### 使用方法

推荐使用静态方法 `PayPasswordDialog.show()` 来显示支付密码输入对话框：

```dart
final password = await PayPasswordDialog.show(
  context: context,
  title: '请输入支付密码', // 可选，默认为"请输入支付密码"
  hintText: '请输入6位数字支付密码', // 可选，默认为"请输入6位数字支付密码"
  cancelText: '取消', // 可选，默认为"取消"
  confirmText: '确定', // 可选，默认为"确定"
  errorText: '密码错误，请重新输入', // 可选，显示初始错误信息
);

if (password != null) {
  // 用户输入了密码并点击了确定
  // 使用密码进行后续操作
} else {
  // 用户点击了取消按钮
}
```

### 参数说明

- `context`：构建上下文，必填
- `title`：对话框标题，可选，默认为"请输入支付密码"
- `hintText`：输入框提示文本，可选，默认为"请输入6位数字支付密码"
- `cancelText`：取消按钮文本，可选，默认为"取消"
- `confirmText`：确认按钮文本，可选，默认为"确定"
- `errorText`：错误提示文本，可选

### 返回值

- 返回 `Future<String?>`
- 点击确认按钮或输入完6位数字后返回用户输入的密码字符串
- 点击取消按钮返回 `null`

### 特性

- 使用分隔的6个输入框显示密码
- 自动显示为圆点(●)以保护隐私
- 输入完6位数字后自动提交
- 仅允许输入数字
- 支持错误信息显示

### 注意事项

- 避免直接使用 Flutter 原生的 `AlertDialog`，应始终使用项目中提供的对话框组件以保持 UI 一致性
- 对于危险操作（如删除、重置等），应使用 `ConfirmDialog` 并将 `isDanger` 设置为 `true`
- 对话框文本应简洁明了，表达清晰的意图
